package kz.snakex.scenes;

import kz.snakelario.Constants;
import kz.snakelario.Textures;
import kz.snakelario.entities.Snake;
import kz.snakelario.entities.SnakeDirection;

import org.andengine.engine.Engine;
import org.andengine.engine.camera.BoundCamera;
import org.andengine.entity.Entity;
import org.andengine.entity.scene.Scene;
import org.andengine.extension.tmx.TMXLayer;
import org.andengine.extension.tmx.TMXLoader;
import org.andengine.extension.tmx.TMXProperties;
import org.andengine.extension.tmx.TMXTile;
import org.andengine.extension.tmx.TMXTileProperty;
import org.andengine.extension.tmx.TMXTiledMap;
import org.andengine.extension.tmx.TMXLoader.ITMXTilePropertiesListener;
import org.andengine.opengl.texture.TextureOptions;
import org.andengine.opengl.vbo.VertexBufferObjectManager;
import org.andengine.util.debug.Debug;

import android.content.res.AssetManager;

public class Level1Scene extends Scene implements Constants {
	private static final int NUMBER_OF_LAYERS = 3;
	private int _mapWidth;
	private int _mapHeight;
	
	private AssetManager _assets;
	private Engine _engine;
	private VertexBufferObjectManager _vertexBufferObjectManager;
	private BoundCamera _camera;
	private Textures _textures;
	private TMXTiledMap mTMXTiledMap;
	private Snake mSnake;
	
	public Level1Scene(AssetManager assets, Engine engine, 
		VertexBufferObjectManager vertexBufferObjectManager, BoundCamera camera, Textures textures) {
		super();
		
		_assets = assets;
		_engine = engine;
		_vertexBufferObjectManager = vertexBufferObjectManager;
		_camera = camera;
		_textures = textures;
		
		for(int i = 0; i < NUMBER_OF_LAYERS; i++) {
	    	attachChild(new Entity());
	    }
		
		try {
	    	final TMXLoader tmxLoader = new TMXLoader(_assets,
    			_engine.getTextureManager(),
    			TextureOptions.BILINEAR_PREMULTIPLYALPHA, 
    			_vertexBufferObjectManager, new ITMXTilePropertiesListener() {
					@Override
					public void onTMXTileWithPropertiesCreated(
							TMXTiledMap pTMXTiledMap, TMXLayer pTMXLayer,
							TMXTile pTMXTile,
							TMXProperties<TMXTileProperty> pTMXTileProperties) {
					}	    		
	    		});
	    	
	    	mTMXTiledMap = tmxLoader.loadFromAsset("levels/level0.tmx");
	    } catch (Exception e) {
	    	Debug.e(e);
	    }
	    
	    final TMXLayer tmxLayer = mTMXTiledMap.getTMXLayers().get(0);
	    //mScene.getChildByIndex(LAYER_TILE_MAP).attachChild(tmxLayer);
	    
	    _mapWidth = tmxLayer.getHeight();
	    _mapHeight = tmxLayer.getWidth();
	    
	    _camera.setBounds(0, 0, tmxLayer.getHeight(), tmxLayer.getWidth());
	    _camera.setBoundsEnabled(true);
	    
	    mSnake = new Snake(CAMERA_WIDTH / 2, CAMERA_HEIGHT / 2, SnakeDirection.RIGHT, mTextures, getVertexBufferObjectManager());
	    mSnake.setMap(_mapWidth, _mapHeight);
	    mScene.getChildByIndex(LAYER_SNAKE).attachChild(mSnake);
	    for (int i = 0; i < 30; i++)
	    	mSnake.grow();
	}
}
